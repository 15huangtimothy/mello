{"version":3,"sources":["components/Login/Login.jsx","components/NavBar/SelectBoard.jsx","components/NavBar/NavBar.jsx","components/Board/TList/ListItem/ListItem.jsx","components/Board/TList/TList.jsx","components/Board/initial-data.js","components/Board/Board.jsx","components/Main/Main.jsx","TrelloHandler.js","App.jsx","serviceWorker.js","index.js"],"names":["Login","state","react_default","a","createElement","className","onClick","this","props","onLogin","type","Component","SelectBoard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","boards","generateBoardList","map","b","key","id","value","name","trelloHandler","loadBoards","setState","onChange","onSelect","NavBar","memberID","generateAccountLink","getMember","m","NavBar_SelectBoard","href","ListItem","_this2","react_beautiful_dnd_esm","draggableId","task","index","provided","snapshot","assign","draggableProps","dragHandleProps","ref","innerRef","content","TList","droppableId","column","droppableProps","tasks","TList_ListItem_ListItem","placeholder","initialData","task-1","task-2","task-3","task-4","columns","column-1","title","taskIds","column-2","column-3","columnOrder","Board","data","onDragEnd","result","destination","source","start","finish","startTaskIds","Array","from","splice","newStart","objectSpread","newData","defineProperty","_objectSpread3","finishTaskIds","newFinish","columnId","taskId","Board_TList_TList","Main","selectedBoard","handleClick","console","log","handleSelect","event","getBoard","target","boardSelected","boardDeselected","setBackground","selected","document","body","style","backgroundImage","prefs","components_NavBar_NavBar","components_Board_Board","TrelloHandler","Trello","authorize","callback","scope","read","write","expiration","success","authorized","bind","error","get","boardID","deselect","member","App","window","verifyAuthorize","components_Main_Main","components_Login_Login","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9665238c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Login.css\";\n\nclass Login extends Component {\n    state = {};\n\n    render() {\n        return (\n            <div className=\"container login-container\">\n                <div className=\"panel text-center center-block\">\n                    <h1 className=\"title\">mello.</h1>\n                    <button\n                        onClick={this.props.onLogin}\n                        type=\"button\"\n                        className=\"btn login-btn\"\n                    >\n                        Log In with Trello\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\n\nclass SelectBoard extends Component {\n    state = {\n        boards: null\n    };\n    constructor(props) {\n        super(props);\n        this.props.trelloHandler.loadBoards(b => {\n            this.setState({ boards: b });\n        });\n    }\n\n    generateBoardList = () => {\n        /** Generate dropdown list of boards */\n        return this.state.boards.map(b => (\n            <option key={b.id} value={b.id}>\n                {b.name}\n            </option>\n        ));\n    };\n\n    render() {\n        return (\n            <select\n                className=\"form-control select-board\"\n                onChange={this.props.onSelect}\n            >\n                <option key={-1} value={-1}>\n                    Select Board\n                </option>\n                {this.state.boards && this.generateBoardList()}\n            </select>\n        );\n    }\n}\n\nexport default SelectBoard;\n","import React, { Component } from \"react\";\nimport SelectBoard from \"./SelectBoard\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n    state = { memberID: null };\n    constructor(props) {\n        super(props);\n        this.props.trelloHandler.getMember(m => {\n            this.setState({ memberID: m.id });\n        });\n    }\n\n    generateAccountLink = () => {\n        /** Generates a link to the user's Trello account settings page */\n        if (this.state.memberID) {\n            return \"https://trello.com/\" + this.state.memberID + \"/account\";\n        } else {\n            return \"#\";\n        }\n    };\n\n    render() {\n        return (\n            <nav className=\"navbar\">\n                <div className=\"col-sm-3 text-left\">\n                    <ul className=\"navbar-nav align-middle\">\n                        <li className=\"nav-item\">\n                            <SelectBoard\n                                trelloHandler={this.props.trelloHandler}\n                                onSelect={this.props.onSelect}\n                            />\n                        </li>\n                    </ul>\n                </div>\n                <div className=\"col-sm-6\">\n                    <h1 className=\"title navbar-title align-middle\">mello.</h1>\n                </div>\n                <div className=\"col-sm-3 text-right\">\n                    <a\n                        href={this.generateAccountLink()}\n                        className=\"account-icon align-middle\"\n                    >\n                        <i className=\"material-icons align-middle\">\n                            account_circle\n                        </i>\n                    </a>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport \"./ListItem.css\";\n\nclass ListItem extends Component {\n    state = {};\n    render() {\n        return (\n            <Draggable\n                draggableId={this.props.task.id}\n                index={this.props.index}\n            >\n                {(provided, snapshot) => (\n                    <div\n                        className=\"list-item\"\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                    >\n                        {this.props.task.content}\n                    </div>\n                )}\n            </Draggable>\n        );\n    }\n}\n\nexport default ListItem;\n","import React, { Component } from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport ListItem from \"./ListItem/ListItem\";\nimport \"./TList.css\";\n\nclass TList extends Component {\n    state = {};\n\n    render() {\n        return (\n            <div className=\"card t-list\">\n                <div className=\"card-header\">\n                    <h3>Hi</h3>\n                </div>\n                <Droppable droppableId={this.props.column.id}>\n                    {(provided, snapshot) => (\n                        <div\n                            className=\"list-item-container\"\n                            ref={provided.innerRef}\n                            {...provided.droppableProps}\n                        >\n                            {this.props.tasks.map((task, index) => (\n                                <ListItem\n                                    key={task.id}\n                                    task={task}\n                                    index={index}\n                                />\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </div>\n        );\n    }\n}\n\nexport default TList;\n","const initialData = {\n    tasks: {\n        \"task-1\": { id: \"task-1\", content: \"Take out the garbage\" },\n        \"task-2\": { id: \"task-2\", content: \"Watch my favourite show\" },\n        \"task-3\": { id: \"task-3\", content: \"Charge my phone\" },\n        \"task-4\": { id: \"task-4\", content: \"Cook dinner\" }\n    },\n    columns: {\n        \"column-1\": {\n            id: \"column-1\",\n            title: \"To do\",\n            taskIds: [\"task-1\", \"task-2\", \"task-3\", \"task-4\"]\n        },\n        \"column-2\": {\n            id: \"column-2\",\n            title: \"In Progress\",\n            taskIds: []\n        },\n        \"column-3\": {\n            id: \"column-3\",\n            title: \"Done\",\n            taskIds: []\n        }\n    },\n\n    columnOrder: [\"column-1\", \"column-2\", \"column-3\"]\n};\n\nexport default initialData;\n","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport TList from \"./TList/TList\";\nimport \"./Board.css\";\n\nimport initialData from \"./initial-data\";\n\nclass Board extends Component {\n    state = { data: initialData };\n\n    onDragEnd = result => {\n        /** Handle drag for list items */\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            // If dragged out of area\n            return;\n        }\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            // If dragged back to same place\n            return;\n        }\n\n        const start = this.state.data.columns[source.droppableId];\n        const finish = this.state.data.columns[destination.droppableId];\n\n        // Change starting column\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds\n        };\n\n        if (start === finish) {\n            // If drag is within same column\n            startTaskIds.splice(destination.index, 0, draggableId);\n            const newData = {\n                ...this.state.data,\n                columns: {\n                    ...this.state.data.columns,\n                    [newStart.id]: newStart\n                }\n            };\n            this.setState({ data: newData });\n        } else {\n            // If drag is to a different column\n            const finishTaskIds = Array.from(finish.taskIds);\n            finishTaskIds.splice(destination.index, 0, draggableId);\n            const newFinish = {\n                ...finish,\n                taskIds: finishTaskIds\n            };\n            const newData = {\n                ...this.state.data,\n                columns: {\n                    ...this.state.data.columns,\n                    [newStart.id]: newStart,\n                    [newFinish.id]: newFinish\n                }\n            };\n            this.setState({ data: newData });\n        }\n    };\n\n    render() {\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div className=\"container container-board\">\n                    {this.state.data.columnOrder.map(columnId => {\n                        const column = this.state.data.columns[columnId];\n                        const tasks = column.taskIds.map(\n                            taskId => this.state.data.tasks[taskId]\n                        );\n                        return (\n                            <TList\n                                key={column.id}\n                                column={column}\n                                tasks={tasks}\n                            />\n                        );\n                    })}\n                </div>\n            </DragDropContext>\n        );\n    }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport NavBar from \"../NavBar/NavBar\";\nimport Board from \"../Board/Board\";\n\nclass Main extends Component {\n    state = { selectedBoard: null };\n\n    handleClick = () => {\n        console.log(this.props.trelloHandler.boards);\n    };\n\n    handleSelect = event => {\n        /** Board is selected. event.target.value returns board id. */\n        this.props.trelloHandler.getBoard(\n            event.target.value,\n            b => {\n                this.setState({ selectedBoard: b }, this.boardSelected);\n            },\n            () => {\n                this.setState({ selectedBoard: null }, this.boardDeselected);\n            }\n        );\n    };\n\n    boardSelected = () => {\n        /** Executes once a board is selected */\n        this.setBackground(true);\n    };\n\n    boardDeselected = () => {\n        /** Executes when no board is selected */\n        this.setBackground(false);\n    };\n\n    setBackground = selected => {\n        /** Set background image to selected board's background image */\n        if (!selected) {\n            document.body.style.backgroundImage = \"none\";\n        } else if (this.state.selectedBoard) {\n            document.body.style.backgroundImage =\n                \"url(\" + this.state.selectedBoard.prefs.backgroundImage + \")\";\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <NavBar\n                    trelloHandler={this.props.trelloHandler}\n                    onSelect={this.handleSelect}\n                />\n                <Board />\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","class TrelloHandler {\n    constructor(Trello) {\n        this.Trello = Trello;\n        this.authorized = false;\n        this.boards = null;\n        this.member = null;\n    }\n\n    authorize = callback => {\n        /** Authorize Trello Account. Returns true to callback if authorization successful. */\n        this.Trello.authorize({\n            type: \"popup\",\n            name: \"mello.\",\n            scope: {\n                read: true,\n                write: true\n            },\n            expiration: \"never\",\n            success: function() {\n                callback(true);\n                this.authorized = true;\n                console.log(\"Authorization Successful\");\n            }.bind(this),\n            error: function() {\n                callback(false);\n                console.log(\"Authorization Failed\");\n            }\n        });\n    };\n\n    getMember = success => {\n        /** Load Trello user data. Returns through success callback function */\n        this.Trello.get(\n            \"/members/me\",\n            function(m) {\n                success(m);\n                console.log(\"Member loaded succesfully\");\n            },\n            function() {\n                console.log(\"Failed to load member\");\n            }\n        );\n    };\n\n    loadBoards = success => {\n        /**\n         * Gets user's active boards. Returns board list with success callback function.\n         */\n        this.Trello.get(\n            \"/members/me/boards?filter=open\",\n            function(b) {\n                console.log(\"Boards loaded\");\n                success(b);\n                this.boards = b;\n            }.bind(this),\n            function() {\n                console.log(\"Failed to load boards\");\n            }\n        );\n    };\n\n    getBoard = (boardID, success, deselect) => {\n        /**\n         * Gets Trello board object from board ID. Returns board object with success callback function.\n         * Deselect called when \"Select Board\" default option is selected\n         */\n        if (boardID === \"-1\") {\n            deselect();\n            return;\n        }\n        this.Trello.get(\n            \"/boards/\" + boardID,\n            function(b) {\n                success(b);\n            },\n            function() {\n                console.log(\"Failed to get board: \" + boardID);\n            }\n        );\n    };\n}\n\nexport default TrelloHandler;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Login from \"./components/Login/Login\";\nimport Main from \"./components/Main/Main.jsx\";\nimport TrelloHandler from \"./TrelloHandler.js\";\n\nclass App extends Component {\n    Trello = new TrelloHandler(window.Trello);\n    state = {\n        authorized: false\n    };\n\n    onLogin = () => {\n        /** Log In button pressed */\n        console.log(\"Login Request\");\n        this.Trello.authorize(this.verifyAuthorize);\n    };\n\n    verifyAuthorize = success => {\n        /** Callback function to verify if Trello authentication was successful.  */\n        if (success) {\n            this.setState({ authorized: true });\n        }\n    };\n\n    render() {\n        if (!this.state.authorized) {\n            return <Login onLogin={this.onLogin} />;\n        } else {\n            return <Main trelloHandler={this.Trello} />;\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}