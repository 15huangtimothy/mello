{"version":3,"sources":["components/Login/Login.jsx","components/NavBar/SelectBoard.jsx","components/NavBar/NavBar.jsx","components/Board/TList/ListItem/ListItem.jsx","components/Board/TList/TList.jsx","components/Board/Board.jsx","components/Main/Main.jsx","TrelloHandler.js","App.jsx","serviceWorker.js","index.js"],"names":["Login","state","react_default","a","createElement","className","onClick","this","props","onLogin","type","Component","SelectBoard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","boards","generateBoardList","map","b","key","id","value","name","trelloHandler","loadBoards","setState","onChange","onSelect","NavBar","memberID","generateAccountLink","getMember","m","NavBar_SelectBoard","href","ListItem","_this2","react_beautiful_dnd_esm","draggableId","task","index","provided","snapshot","assign","isDragging","draggableProps","dragHandleProps","ref","innerRef","TList","column","droppableId","droppableProps","tasks","TList_ListItem_ListItem","placeholder","Packery","window","Draggabilly","Board","data","lists","pckry","componentDidMount","elem","document","querySelector","itemSelector","columnWidth","gutter","percentPosition","getItemElements","forEach","itemElem","draggie","handle","bindDraggabillyEvents","layout","onDragEnd","result","destination","source","start","columns","finish","startTaskIds","Array","from","taskIds","splice","newStart","objectSpread","newData","defineProperty","_objectSpread3","finishTaskIds","newFinish","destroy","reloadItems","columnOrder","columnId","taskId","Board_TList_TList","Main","selectedBoard","handleClick","console","log","handleSelect","event","getBoard","target","boardSelected","boardDeselected","loadLists","setBackground","getListTaskData","resetTaskData","selected","body","style","backgroundImage","prefs","l","callback","arguments","length","undefined","components_Board_Board","components_NavBar_NavBar","generateBoard","TrelloHandler","Trello","authorize","scope","read","write","expiration","success","authorized","bind","error","get","boardID","deselect","taskData","getTasksFromLists","itemsProcessed","element","processTaskData","push","member","App","verifyAuthorize","components_Main_Main","components_Login_Login","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3900a2d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Login.css\";\n\nclass Login extends Component {\n    state = {};\n\n    render() {\n        return (\n            <div className=\"container login-container\">\n                <div className=\"panel text-center center-block\">\n                    <h1 className=\"title\">mello.</h1>\n                    <button\n                        onClick={this.props.onLogin}\n                        type=\"button\"\n                        className=\"btn login-btn\"\n                    >\n                        Log In with Trello\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\n\nclass SelectBoard extends Component {\n    state = {\n        boards: null\n    };\n    constructor(props) {\n        super(props);\n        this.props.trelloHandler.loadBoards(b => {\n            this.setState({ boards: b });\n        });\n    }\n\n    generateBoardList = () => {\n        /** Generate dropdown list of boards */\n        return this.state.boards.map(b => (\n            <option key={b.id} value={b.id}>\n                {b.name}\n            </option>\n        ));\n    };\n\n    render() {\n        return (\n            <select\n                className=\"form-control select-board\"\n                onChange={this.props.onSelect}\n            >\n                <option key={-1} value={-1}>\n                    Select Board\n                </option>\n                {this.state.boards && this.generateBoardList()}\n            </select>\n        );\n    }\n}\n\nexport default SelectBoard;\n","import React, { Component } from \"react\";\nimport SelectBoard from \"./SelectBoard\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n    state = { memberID: null };\n    constructor(props) {\n        super(props);\n        this.props.trelloHandler.getMember(m => {\n            this.setState({ memberID: m.id });\n        });\n    }\n\n    generateAccountLink = () => {\n        /** Generates a link to the user's Trello account settings page */\n        if (this.state.memberID) {\n            return \"https://trello.com/\" + this.state.memberID + \"/account\";\n        } else {\n            return \"#\";\n        }\n    };\n\n    render() {\n        return (\n            <nav className=\"navbar\">\n                <div className=\"col-sm-3 text-left\">\n                    <ul className=\"navbar-nav align-middle\">\n                        <li className=\"nav-item\">\n                            <SelectBoard\n                                trelloHandler={this.props.trelloHandler}\n                                onSelect={this.props.onSelect}\n                            />\n                        </li>\n                    </ul>\n                </div>\n                <div className=\"col-sm-6\">\n                    <h1 className=\"title navbar-title align-middle\">mello.</h1>\n                </div>\n                <div className=\"col-sm-3 text-right\">\n                    <a\n                        href={this.generateAccountLink()}\n                        className=\"account-icon align-middle\"\n                    >\n                        <i className=\"material-icons align-middle\">\n                            account_circle\n                        </i>\n                    </a>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport \"./ListItem.css\";\n\nclass ListItem extends Component {\n    state = {};\n\n    render() {\n        return (\n            <Draggable\n                draggableId={this.props.task.id}\n                index={this.props.index}\n            >\n                {(provided, snapshot) => (\n                    <div\n                        className={\n                            \"list-item\" +\n                            (snapshot.isDragging ? \" on-drag\" : \"\")\n                        }\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                    >\n                        {this.props.task.name}\n                    </div>\n                )}\n            </Draggable>\n        );\n    }\n}\n\nexport default ListItem;\n","import React, { Component } from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport ListItem from \"./ListItem/ListItem\";\nimport \"./TList.css\";\n\nclass TList extends Component {\n    state = {};\n\n    render() {\n        return (\n            <div className=\"grid-item\">\n                <div className=\"card t-list\">\n                    <div className=\"card-header handle\">\n                        <p className=\"card-title\">{this.props.column.name}</p>\n                    </div>\n                    <Droppable droppableId={this.props.column.id} type=\"task\">\n                        {(provided, snapshot) => (\n                            <div\n                                className=\"list-item-container\"\n                                ref={provided.innerRef}\n                                {...provided.droppableProps}\n                            >\n                                {this.props.tasks.map((task, index) => (\n                                    <ListItem\n                                        key={task.id}\n                                        task={task}\n                                        index={index}\n                                    />\n                                ))}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TList;\n","import React, { Component } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport TList from \"./TList/TList\";\nimport \"./Board.css\";\n\nconst Packery = window.Packery;\nconst Draggabilly = window.Draggabilly;\n\nclass Board extends Component {\n    state = {\n        data: this.props.lists,\n        pckry: null\n    };\n\n    componentDidMount = () => {\n        var elem = document.querySelector(\".grid\");\n        var pckry = new Packery(elem, {\n            itemSelector: \".grid-item\",\n            columnWidth: \".grid-sizer\",\n            gutter: \".gutter-sizer\",\n            percentPosition: true\n        });\n        this.setState({ pckry: pckry });\n        pckry.getItemElements().forEach(function(itemElem) {\n            var draggie = new Draggabilly(itemElem, { handle: \".handle\" });\n            pckry.bindDraggabillyEvents(draggie);\n        });\n        pckry.layout();\n    };\n\n    compomentDidUnmount() {\n        this.state.pckry.destroy();\n    }\n\n    componentDidUpdate() {\n        if (this.state.pckry) {\n            this.state.pckry.reloadItems();\n            this.state.pckry.layout();\n        }\n    }\n\n    onDragEnd = result => {\n        /** Handle drag for list items */\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            // If dragged out of area\n            return;\n        }\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            // If dragged back to same place\n            return;\n        }\n\n        const start = this.state.data.columns[source.droppableId];\n        const finish = this.state.data.columns[destination.droppableId];\n\n        // Change starting column\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds\n        };\n\n        if (start === finish) {\n            // If drag is within same column\n            startTaskIds.splice(destination.index, 0, draggableId);\n            const newData = {\n                ...this.state.data,\n                columns: {\n                    ...this.state.data.columns,\n                    [newStart.id]: newStart\n                }\n            };\n            this.setState({ data: newData });\n        } else {\n            // If drag is to a different column\n            const finishTaskIds = Array.from(finish.taskIds);\n            finishTaskIds.splice(destination.index, 0, draggableId);\n            const newFinish = {\n                ...finish,\n                taskIds: finishTaskIds\n            };\n            const newData = {\n                ...this.state.data,\n                columns: {\n                    ...this.state.data.columns,\n                    [newStart.id]: newStart,\n                    [newFinish.id]: newFinish\n                }\n            };\n            this.setState({ data: newData });\n        }\n    };\n\n    render() {\n        if (this.state.data) {\n            return (\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <div className=\"container container-board\">\n                        <div className=\"grid\">\n                            <div className=\"gutter-sizer\" />\n                            <div className=\"grid-sizer\" />\n                            {this.state.data.columnOrder.map(\n                                (columnId, index) => {\n                                    const column = this.state.data.columns[\n                                        columnId\n                                    ];\n                                    const tasks = column.taskIds.map(\n                                        taskId => this.state.data.tasks[taskId]\n                                    );\n                                    return (\n                                        <TList\n                                            key={column.id}\n                                            column={column}\n                                            tasks={tasks}\n                                            index={index}\n                                        />\n                                    );\n                                }\n                            )}\n                        </div>\n                    </div>\n                </DragDropContext>\n            );\n        }\n        return null;\n    }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport NavBar from \"../NavBar/NavBar\";\nimport Board from \"../Board/Board\";\n\nclass Main extends Component {\n    state = { selectedBoard: null, lists: null };\n\n    handleClick = () => {\n        console.log(this.props.trelloHandler.boards);\n    };\n\n    handleSelect = event => {\n        /** Board is selected. event.target.value returns board id. */\n        this.props.trelloHandler.getBoard(\n            event.target.value,\n            b => {\n                this.setState({ selectedBoard: b }, this.boardSelected);\n            },\n            () => {\n                this.setState(\n                    { selectedBoard: null, lists: null },\n                    this.boardDeselected\n                );\n            }\n        );\n    };\n\n    boardSelected = () => {\n        /** Executes once a board is selected */\n        this.boardDeselected();\n        // Reset lists before loading new lists\n        this.loadLists(null, () => {\n            this.setBackground(true);\n            this.props.trelloHandler.getListTaskData(\n                this.state.selectedBoard.id,\n                this.loadLists\n            );\n        });\n    };\n\n    boardDeselected = () => {\n        /** Executes when no board is selected */\n        this.setBackground(false);\n        this.props.trelloHandler.resetTaskData();\n    };\n\n    setBackground = selected => {\n        /** Set background image to selected board's background image */\n        if (!selected) {\n            document.body.style.backgroundImage = \"none\";\n        } else if (this.state.selectedBoard) {\n            document.body.style.backgroundImage =\n                \"url(\" + this.state.selectedBoard.prefs.backgroundImage + \")\";\n        }\n    };\n\n    loadLists = (l, callback = function() {}) => {\n        /**\n         * Callback function when list/task data is done processing by TrelloHandler.\n         * List/task data returned through l.\n         */\n        this.setState({ lists: l }, callback);\n    };\n\n    generateBoard() {\n        /** Returns Board object containing loaded lists and tasks */\n        return <Board lists={this.state.lists} />;\n    }\n\n    render() {\n        return (\n            <div>\n                <NavBar\n                    trelloHandler={this.props.trelloHandler}\n                    onSelect={this.handleSelect}\n                />\n                {this.state.lists && this.generateBoard()}\n            </div>\n        );\n    }\n}\n// {this.state.boards && this.generateBoardList()}\nexport default Main;\n","class TrelloHandler {\n    constructor(Trello) {\n        this.Trello = Trello;\n        this.authorized = false;\n        this.boards = null;\n        this.member = null;\n        this.taskData = { tasks: {}, columns: {}, columnOrder: [] };\n    }\n\n    authorize = callback => {\n        /** Authorize Trello Account. Returns true to callback if authorization successful. */\n        this.Trello.authorize({\n            type: \"popup\",\n            name: \"mello.\",\n            scope: {\n                read: true,\n                write: true\n            },\n            expiration: \"never\",\n            success: function() {\n                callback(true);\n                this.authorized = true;\n                console.log(\"Authorization Successful\");\n            }.bind(this),\n            error: function() {\n                callback(false);\n                console.log(\"Authorization Failed\");\n            }\n        });\n    };\n\n    getMember = success => {\n        /** Load Trello user data. Returns through success callback function */\n        this.Trello.get(\n            \"/members/me\",\n            function(m) {\n                success(m);\n                console.log(\"User loaded succesfully\");\n            },\n            function() {\n                console.log(\"Failed to load member\");\n            }\n        );\n    };\n\n    loadBoards = success => {\n        /**\n         * Gets user's active boards. Returns board list with success callback function.\n         */\n        this.Trello.get(\n            \"/members/me/boards?filter=open\",\n            function(b) {\n                console.log(\"Boards loaded\");\n                success(b);\n                this.boards = b;\n            }.bind(this),\n            function() {\n                console.log(\"Failed to load boards\");\n            }\n        );\n    };\n\n    getBoard = (boardID, success, deselect) => {\n        /**\n         * Gets Trello board object from board ID. Returns board object with success callback function.\n         * Deselect called when \"Select Board\" default option is selected\n         */\n        if (boardID === \"-1\") {\n            deselect();\n            return;\n        }\n        this.Trello.get(\n            \"/boards/\" + boardID,\n            function(b) {\n                success(b);\n            },\n            function() {\n                console.log(\"Failed to get board: \" + boardID);\n            }\n        );\n    };\n\n    resetTaskData = () => {\n        /** Reset taskData variable */\n        this.taskData = { tasks: {}, columns: {}, columnOrder: [] };\n    };\n\n    getListTaskData = (boardID, success) => {\n        /**\n         * Gets all the lists on a given board with boardID. Return a successfully parsed lists\n         * and tasks data object for Drag and Drop functionality through the success callback.\n         */\n        this.resetTaskData();\n\n        this.Trello.get(\n            \"/boards/\" + boardID + \"/lists\",\n            function(lists) {\n                console.log(\"Lists loaded succesfully\");\n                this.getTasksFromLists(lists, success);\n            }.bind(this),\n            function() {\n                console.log(\"Failed to load lists\");\n            }\n        );\n    };\n\n    getTasksFromLists = (lists, success) => {\n        /**\n         * Gets all the tasks from a set of lists from the lists argument. Return a successfully\n         * parsed lists and tasks data object for Drag and Drop functionality through the success\n         * callback.\n         */\n        if (lists.length === 0) {\n            // Check if board contains lists.\n            success(this.taskData);\n            console.log(\"Successfully parsed list/task data\");\n        }\n\n        // Loop through each list in the board to get and process each list's set of tasks\n        console.log(\"Getting Tasks\");\n        var itemsProcessed = 0;\n        lists.forEach(element => {\n            this.Trello.get(\n                \"/lists/\" + element.id + \"/cards\",\n                function(tasks) {\n                    this.processTaskData({ ...element, tasks });\n                    itemsProcessed++;\n                    if (itemsProcessed === lists.length) {\n                        // Check if all task data has finished fetching.\n                        success(this.taskData);\n                        console.log(\"Successfully parsed list/task data\");\n                    }\n                }.bind(this),\n                function() {\n                    console.log(\"Failed to load cards\");\n                }\n            );\n        });\n    };\n\n    processTaskData = data => {\n        /**\n         * Format the input task list data from fetch operations to be used by Drag and\n         * Drop functionality and returns through the global taskData variable\n         */\n        // Generate columns data.\n        this.taskData.columns[data.id] = {\n            ...data,\n            taskIds: []\n        };\n        // Generate tasks data\n        data.tasks.forEach(element => {\n            this.taskData.columns[data.id].taskIds.push(element.id);\n            this.taskData.tasks[element.id] = { ...element };\n        });\n        // Generate columnOrder data\n        this.taskData.columnOrder.push(data.id);\n    };\n}\n\nexport default TrelloHandler;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Login from \"./components/Login/Login\";\nimport Main from \"./components/Main/Main.jsx\";\nimport TrelloHandler from \"./TrelloHandler.js\";\n\nclass App extends Component {\n    Trello = new TrelloHandler(window.Trello);\n    state = {\n        authorized: false\n    };\n\n    onLogin = () => {\n        /** Log In button pressed */\n        console.log(\"Login Request\");\n        this.Trello.authorize(this.verifyAuthorize);\n    };\n\n    verifyAuthorize = success => {\n        /** Callback function to verify if Trello authentication was successful.  */\n        if (success) {\n            this.setState({ authorized: true });\n        }\n    };\n\n    render() {\n        if (!this.state.authorized) {\n            return <Login onLogin={this.onLogin} />;\n        } else {\n            return <Main trelloHandler={this.Trello} />;\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}