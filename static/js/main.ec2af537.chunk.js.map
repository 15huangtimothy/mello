{"version":3,"sources":["components/login.jsx","components/main.jsx","TrelloHandler.js","App.jsx","serviceWorker.js","index.js"],"names":["Login","state","react_default","a","createElement","className","onClick","this","props","onLogin","type","Component","Main","TrelloHandler","Trello","_this","Object","classCallCheck","authorize","callback","name","scope","read","write","expiration","success","authorized","console","log","error","App","window","verifyAuthorize","setState","main","components_login","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPA0BeA,0NAtBXC,MAAQ,2EAGJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UACAH,EAAAC,EAAAC,cAAA,UACIE,QAASC,KAAKC,MAAMC,QACpBC,KAAK,SACLL,UAAU,6BAEVH,EAAAC,EAAAC,cAAA,2CAdRO,cCMLC,6MANXX,MAAQ,2EAEJ,OAAOC,EAAAC,EAAAC,cAAA,uBAHIO,aC+BJE,aAhCX,SAAAA,EAAYC,GAAQ,IAAAC,EAAAR,KAAAS,OAAAC,EAAA,EAAAD,CAAAT,KAAAM,GAAAN,KAKpBW,UAAY,SAAAC,GAERJ,EAAKD,OAAOI,UAAU,CAClBR,KAAM,QACNU,KAAM,QACNC,MAAO,CACHC,MAAM,EACNC,OAAO,GAEXC,WAAY,QACZC,QAAS,WACLN,GAAS,GACTZ,KAAKmB,YAAa,EAClBC,QAAQC,IAAI,6BAEhBC,MAAO,WACHV,GAAS,GACTQ,QAAQC,IAAI,4BArBpBrB,KAAKO,OAASA,EACdP,KAAKmB,YAAa,6DA0BlB,OAAOnB,KAAKmB,oBCKLI,6MA3BXhB,OAAS,IAAID,EAAckB,OAAOjB,UAClCb,MAAQ,CACJyB,YAAY,KAGhBjB,QAAU,WAENkB,QAAQC,IAAI,iBACZb,EAAKD,OAAOI,UAAUH,EAAKiB,oBAG/BA,gBAAkB,SAAAP,GAEVA,GACAV,EAAKkB,SAAS,CAAEP,YAAY,6EAKhC,OAAKnB,KAAKN,MAAMyB,WAGLxB,EAAAC,EAAAC,cAAC8B,EAAD,MAFAhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAO1B,QAASF,KAAKE,iBArBtBE,aCMEyB,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ec2af537.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./login.css\";\n\nclass Login extends Component {\n    state = {};\n\n    render() {\n        return (\n            <div className=\"container login-container\">\n                <div className=\"row\">\n                    <div className=\"col-lg-6 col-lg-offset-3 text-center center-block\">\n                        <h1 className=\"title\">mello.</h1>\n                        <button\n                            onClick={this.props.onLogin}\n                            type=\"button\"\n                            className=\"btn btn-primary login-btn\"\n                        >\n                            <h6>Log In with Trello</h6>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\n\nclass Main extends Component {\n    state = {};\n    render() {\n        return <h1>Hi</h1>;\n    }\n}\n\nexport default Main;\n","class TrelloHandler {\n    constructor(Trello) {\n        this.Trello = Trello;\n        this.authorized = false;\n    }\n\n    authorize = callback => {\n        /** Authorize Trello Account. Returns true to callback if authorization successful. */\n        this.Trello.authorize({\n            type: \"popup\",\n            name: \"mello\",\n            scope: {\n                read: true,\n                write: true\n            },\n            expiration: \"never\",\n            success: function() {\n                callback(true);\n                this.authorized = true;\n                console.log(\"Authorization Successful\");\n            },\n            error: function() {\n                callback(false);\n                console.log(\"Authorization Failed\");\n            }\n        });\n    };\n\n    isAuthorized() {\n        return this.authorized;\n    }\n}\n\nexport default TrelloHandler;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Login from \"./components/login\";\nimport Main from \"./components/main\";\nimport TrelloHandler from \"./TrelloHandler.js\";\n\nclass App extends Component {\n    Trello = new TrelloHandler(window.Trello);\n    state = {\n        authorized: false\n    };\n\n    onLogin = () => {\n        /** Log In button pressed */\n        console.log(\"Login Request\");\n        this.Trello.authorize(this.verifyAuthorize);\n    };\n\n    verifyAuthorize = success => {\n        /** Callback function to verify if Trello authentication was successful.  */\n        if (success) {\n            this.setState({ authorized: true });\n        }\n    };\n\n    render() {\n        if (!this.state.authorized) {\n            return <Login onLogin={this.onLogin} />;\n        } else {\n            return <Main />;\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}