{"version":3,"sources":["components/Login/Login.jsx","components/NavBar/SelectBoard.jsx","components/NavBar/NavBar.jsx","components/Board/TList/ListItem/ListItem.jsx","components/Board/TList/TList.jsx","components/Board/Board.jsx","components/Main/Main.jsx","TrelloHandler.js","App.jsx","serviceWorker.js","index.js"],"names":["Login","state","react_default","a","createElement","className","onClick","this","props","onLogin","type","Component","SelectBoard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","boards","generateBoardList","map","b","key","id","value","name","trelloHandler","loadBoards","setState","onChange","onSelect","NavBar","memberID","generateAccountLink","getMember","m","NavBar_SelectBoard","href","ListItem","_this2","react_beautiful_dnd_esm","draggableId","task","index","provided","snapshot","assign","isDragging","draggableProps","dragHandleProps","ref","innerRef","TList","addingNewTask","newTask","handleNewTaskChange","event","target","onSubmitNewTask","preventDefault","addNewTask","column","onAddNewTask","onSubmit","placeholder","_this3","droppableId","droppableProps","tasks","TList_ListItem_ListItem","newTaskButton","Packery","window","Draggabilly","Board","data","lists","pckry","componentDidMount","elem","document","querySelector","itemSelector","columnWidth","gutter","percentPosition","getItemElements","forEach","itemElem","draggie","handle","bindDraggabillyEvents","layout","newData","objectSpread","columns","idList","taskIds","push","onDragEnd","result","destination","source","start","finish","startTaskIds","Array","from","splice","newStart","defineProperty","_objectSpread3","finishTaskIds","newFinish","dragToNewColumn","destroy","reloadItems","columnOrder","columnId","taskId","Board_TList_TList","Main","selectedBoard","handleClick","console","log","handleSelect","getBoard","boardSelected","boardDeselected","loadLists","setBackground","getListTaskData","resetTaskData","selected","body","style","backgroundImage","prefs","l","callback","arguments","length","undefined","components_Board_Board","components_NavBar_NavBar","generateBoard","TrelloHandler","Trello","authorize","scope","read","write","expiration","success","authorized","bind","error","get","boardID","deselect","taskData","getTasksFromLists","itemsProcessed","element","processTaskData","columnID","newTaskName","post","c","member","finishID","taskID","put","r","App","verifyAuthorize","components_Main_Main","components_Login_Login","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.274c38f5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Login.css\";\r\n\r\nclass Login extends Component {\r\n    state = {};\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container login-container\">\r\n                <div className=\"panel text-center center-block\">\r\n                    <h1 className=\"title\">mello.</h1>\r\n                    <button\r\n                        onClick={this.props.onLogin}\r\n                        type=\"button\"\r\n                        className=\"btn login-btn\"\r\n                    >\r\n                        Log In with Trello\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SelectBoard extends Component {\r\n    state = {\r\n        boards: null\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n        this.props.trelloHandler.loadBoards(b => {\r\n            this.setState({ boards: b });\r\n        });\r\n    }\r\n\r\n    generateBoardList = () => {\r\n        /** Generate dropdown list of boards */\r\n        return this.state.boards.map(b => (\r\n            <option key={b.id} value={b.id}>\r\n                {b.name}\r\n            </option>\r\n        ));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <select\r\n                className=\"form-control select-board\"\r\n                onChange={this.props.onSelect}\r\n            >\r\n                <option key={-1} value={-1}>\r\n                    Select Board\r\n                </option>\r\n                {this.state.boards && this.generateBoardList()}\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectBoard;\r\n","import React, { Component } from \"react\";\r\nimport SelectBoard from \"./SelectBoard\";\r\nimport \"./NavBar.css\";\r\n\r\nclass NavBar extends Component {\r\n    state = { memberID: null };\r\n    constructor(props) {\r\n        super(props);\r\n        this.props.trelloHandler.getMember(m => {\r\n            this.setState({ memberID: m.id });\r\n        });\r\n    }\r\n\r\n    generateAccountLink = () => {\r\n        /** Generates a link to the user's Trello account settings page */\r\n        if (this.state.memberID) {\r\n            return \"https://trello.com/\" + this.state.memberID + \"/account\";\r\n        } else {\r\n            return \"#\";\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar\">\r\n                <div className=\"col-sm-3 text-left\">\r\n                    <ul className=\"navbar-nav align-middle\">\r\n                        <li className=\"nav-item\">\r\n                            <SelectBoard\r\n                                trelloHandler={this.props.trelloHandler}\r\n                                onSelect={this.props.onSelect}\r\n                            />\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"col-sm-6\">\r\n                    <h1 className=\"title navbar-title align-middle\">mello.</h1>\r\n                </div>\r\n                <div className=\"col-sm-3 text-right\">\r\n                    <a\r\n                        href={this.generateAccountLink()}\r\n                        className=\"account-icon align-middle\"\r\n                    >\r\n                        <i className=\"material-icons align-middle\">\r\n                            account_circle\r\n                        </i>\r\n                    </a>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport \"./ListItem.css\";\r\n\r\nclass ListItem extends Component {\r\n    state = {};\r\n\r\n    render() {\r\n        return (\r\n            <Draggable\r\n                draggableId={this.props.task.id}\r\n                index={this.props.index}\r\n            >\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                        className={\r\n                            \"list-item\" +\r\n                            (snapshot.isDragging ? \" on-drag\" : \"\")\r\n                        }\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        {this.props.task.name}\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListItem;\r\n","import React, { Component } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport ListItem from './ListItem/ListItem';\r\nimport './TList.css';\r\n\r\nclass TList extends Component {\r\n    state = { addingNewTask: false, newTask: null };\r\n\r\n    newTaskButton() {\r\n        /**\r\n         * Conditionally generates and returns the add new task button\r\n         * or input field for entering a new task name.\r\n         */\r\n        if (this.state.addingNewTask) {\r\n            return (\r\n                <form\r\n                    className=\"new-task-container\"\r\n                    onSubmit={this.onSubmitNewTask}\r\n                >\r\n                    <input\r\n                        className=\"new-task-input\"\r\n                        type=\"text\"\r\n                        value={this.state.value}\r\n                        placeholder=\"Enter New Task\"\r\n                        onChange={this.handleNewTaskChange}\r\n                    />\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Add\"\r\n                        className=\"btn btn-new-task-submit\"\r\n                    />\r\n                </form>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"new-task-container\">\r\n                    <button\r\n                        className=\"btn btn-new-task\"\r\n                        onClick={() => {\r\n                            this.setState({ addingNewTask: true });\r\n                        }}\r\n                    >\r\n                        <i className=\"material-icons\">add</i>\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    handleNewTaskChange = event => {\r\n        /** Handles changes to the input field when entering a new task name */\r\n        this.setState({ newTask: event.target.value });\r\n    };\r\n\r\n    onSubmitNewTask = event => {\r\n        /** Handles submit button when creating a new task */\r\n        event.preventDefault();\r\n        this.props.trelloHandler.addNewTask(\r\n            this.props.column.id,\r\n            this.state.newTask,\r\n            this.props.onAddNewTask\r\n        );\r\n        this.setState({ addingNewTask: false, newTask: null });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"grid-item\">\r\n                <div className=\"card t-list\">\r\n                    <div className=\"card-header handle\">\r\n                        <p className=\"card-title\">{this.props.column.name}</p>\r\n                    </div>\r\n                    <Droppable droppableId={this.props.column.id} type=\"task\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                className=\"list-item-container\"\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}\r\n                            >\r\n                                {this.props.tasks.map((task, index) => (\r\n                                    <ListItem\r\n                                        key={task.id}\r\n                                        task={task}\r\n                                        index={index}\r\n                                    />\r\n                                ))}\r\n                                {this.newTaskButton()}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TList;\r\n","import React, { Component } from 'react';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport TList from './TList/TList';\r\nimport './Board.css';\r\n\r\nconst Packery = window.Packery;\r\nconst Draggabilly = window.Draggabilly;\r\n\r\nclass Board extends Component {\r\n    state = {\r\n        data: this.props.lists,\r\n        pckry: null\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        // Set up Packery and Draggabilly\r\n        var elem = document.querySelector('.grid');\r\n        var pckry = new Packery(elem, {\r\n            itemSelector: '.grid-item',\r\n            columnWidth: '.grid-sizer',\r\n            gutter: '.gutter-sizer',\r\n            percentPosition: true\r\n        });\r\n        this.setState({ pckry: pckry });\r\n        pckry.getItemElements().forEach(function(itemElem) {\r\n            var draggie = new Draggabilly(itemElem, { handle: '.handle' });\r\n            pckry.bindDraggabillyEvents(draggie);\r\n        });\r\n        pckry.layout();\r\n    };\r\n\r\n    compomentDidUnmount() {\r\n        this.state.pckry.destroy();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.pckry) {\r\n            this.state.pckry.reloadItems();\r\n            this.state.pckry.layout();\r\n        }\r\n    }\r\n\r\n    addNewTask = task => {\r\n        /**\r\n         * Handles when a new task is added to a lsit. Updates\r\n         * the state list data with new task included.\r\n         */\r\n        let newData = { ...this.state.data };\r\n        newData.columns[task.idList].taskIds.push(task.id);\r\n        newData.tasks[task.id] = { ...task };\r\n        this.setState({ data: newData });\r\n    };\r\n\r\n    onDragEnd = result => {\r\n        /** Handle drag for list items */\r\n        const { destination, source, draggableId } = result;\r\n\r\n        if (!destination) {\r\n            // If dragged out of area\r\n            return;\r\n        }\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) {\r\n            // If dragged back to same place\r\n            return;\r\n        }\r\n\r\n        const start = this.state.data.columns[source.droppableId];\r\n        const finish = this.state.data.columns[destination.droppableId];\r\n\r\n        // Change starting column\r\n        const startTaskIds = Array.from(start.taskIds);\r\n        startTaskIds.splice(source.index, 1);\r\n        const newStart = {\r\n            ...start,\r\n            taskIds: startTaskIds\r\n        };\r\n\r\n        if (start === finish) {\r\n            // If drag is within same column\r\n            startTaskIds.splice(destination.index, 0, draggableId);\r\n            const newData = {\r\n                ...this.state.data,\r\n                columns: {\r\n                    ...this.state.data.columns,\r\n                    [newStart.id]: newStart\r\n                }\r\n            };\r\n            this.setState({ data: newData });\r\n        } else {\r\n            // If drag is to a different column\r\n            const finishTaskIds = Array.from(finish.taskIds);\r\n            finishTaskIds.splice(destination.index, 0, draggableId);\r\n            const newFinish = {\r\n                ...finish,\r\n                taskIds: finishTaskIds\r\n            };\r\n            const newData = {\r\n                ...this.state.data,\r\n                columns: {\r\n                    ...this.state.data.columns,\r\n                    [newStart.id]: newStart,\r\n                    [newFinish.id]: newFinish\r\n                }\r\n            };\r\n            this.setState({ data: newData });\r\n            this.props.trelloHandler.dragToNewColumn(finish.id, draggableId);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.state.data) {\r\n            return (\r\n                <DragDropContext onDragEnd={this.onDragEnd}>\r\n                    <div className=\"container container-board\">\r\n                        <div className=\"grid\">\r\n                            <div className=\"gutter-sizer\" />\r\n                            <div className=\"grid-sizer\" />\r\n                            {this.state.data.columnOrder.map(\r\n                                (columnId, index) => {\r\n                                    const column = this.state.data.columns[\r\n                                        columnId\r\n                                    ];\r\n                                    const tasks = column.taskIds.map(\r\n                                        taskId => this.state.data.tasks[taskId]\r\n                                    );\r\n                                    return (\r\n                                        <TList\r\n                                            key={column.id}\r\n                                            column={column}\r\n                                            tasks={tasks}\r\n                                            index={index}\r\n                                            trelloHandler={\r\n                                                this.props.trelloHandler\r\n                                            }\r\n                                            onAddNewTask={this.addNewTask}\r\n                                        />\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </DragDropContext>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\nimport NavBar from '../NavBar/NavBar';\r\nimport Board from '../Board/Board';\r\n\r\nclass Main extends Component {\r\n    state = { selectedBoard: null, lists: null };\r\n\r\n    handleClick = () => {\r\n        console.log(this.props.trelloHandler.boards);\r\n    };\r\n\r\n    handleSelect = event => {\r\n        /** Board is selected. event.target.value returns board id. */\r\n        this.props.trelloHandler.getBoard(\r\n            event.target.value,\r\n            b => {\r\n                this.setState({ selectedBoard: b }, this.boardSelected);\r\n            },\r\n            () => {\r\n                this.setState(\r\n                    { selectedBoard: null, lists: null },\r\n                    this.boardDeselected\r\n                );\r\n            }\r\n        );\r\n    };\r\n\r\n    boardSelected = () => {\r\n        /** Executes once a board is selected */\r\n        this.boardDeselected();\r\n        // Reset lists before loading new lists\r\n        this.loadLists(null, () => {\r\n            this.setBackground(true);\r\n            this.props.trelloHandler.getListTaskData(\r\n                this.state.selectedBoard.id,\r\n                this.loadLists\r\n            );\r\n        });\r\n    };\r\n\r\n    boardDeselected = () => {\r\n        /** Executes when no board is selected */\r\n        this.setBackground(false);\r\n        this.props.trelloHandler.resetTaskData();\r\n    };\r\n\r\n    setBackground = selected => {\r\n        /** Set background image to selected board's background image */\r\n        if (!selected) {\r\n            document.body.style.backgroundImage = 'none';\r\n        } else if (this.state.selectedBoard) {\r\n            document.body.style.backgroundImage =\r\n                'url(' + this.state.selectedBoard.prefs.backgroundImage + ')';\r\n        }\r\n    };\r\n\r\n    loadLists = (l, callback = function() {}) => {\r\n        /**\r\n         * Callback function when list/task data is done processing by TrelloHandler.\r\n         * List/task data returned through l.\r\n         */\r\n        this.setState({ lists: l }, callback);\r\n    };\r\n\r\n    generateBoard() {\r\n        /** Returns Board object containing loaded lists and tasks */\r\n        return (\r\n            <Board\r\n                lists={this.state.lists}\r\n                trelloHandler={this.props.trelloHandler}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar\r\n                    trelloHandler={this.props.trelloHandler}\r\n                    onSelect={this.handleSelect}\r\n                />\r\n                {this.state.lists && this.generateBoard()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// {this.state.boards && this.generateBoardList()}\r\nexport default Main;\r\n","class TrelloHandler {\r\n    constructor(Trello) {\r\n        this.Trello = Trello;\r\n        this.authorized = false;\r\n        this.boards = null;\r\n        this.member = null;\r\n        this.taskData = { tasks: {}, columns: {}, columnOrder: [] };\r\n    }\r\n\r\n    authorize = callback => {\r\n        /** Authorize Trello Account. Returns true to callback if authorization successful. */\r\n        this.Trello.authorize({\r\n            type: 'popup',\r\n            name: 'mello.',\r\n            scope: {\r\n                read: true,\r\n                write: true\r\n            },\r\n            expiration: 'never',\r\n            success: function() {\r\n                callback(true);\r\n                this.authorized = true;\r\n                console.log('Authorization Successful');\r\n            }.bind(this),\r\n            error: function() {\r\n                callback(false);\r\n                console.log('Authorization Failed');\r\n            }\r\n        });\r\n    };\r\n\r\n    getMember = success => {\r\n        /** Load Trello user data. Returns through success callback function */\r\n        this.Trello.get(\r\n            '/members/me',\r\n            function(m) {\r\n                success(m);\r\n                console.log('User loaded succesfully');\r\n            },\r\n            function() {\r\n                console.log('Failed to load member');\r\n            }\r\n        );\r\n    };\r\n\r\n    loadBoards = success => {\r\n        /**\r\n         * Gets user's active boards. Returns board list with success callback function.\r\n         */\r\n        this.Trello.get(\r\n            '/members/me/boards?filter=open',\r\n            function(b) {\r\n                console.log('Boards loaded');\r\n                success(b);\r\n                this.boards = b;\r\n            }.bind(this),\r\n            function() {\r\n                console.log('Failed to load boards');\r\n            }\r\n        );\r\n    };\r\n\r\n    getBoard = (boardID, success, deselect) => {\r\n        /**\r\n         * Gets Trello board object from board ID. Returns board object with success callback function.\r\n         * Deselect called when \"Select Board\" default option is selected\r\n         */\r\n        if (boardID === '-1') {\r\n            deselect();\r\n            return;\r\n        }\r\n        this.Trello.get(\r\n            '/boards/' + boardID,\r\n            function(b) {\r\n                success(b);\r\n            },\r\n            function() {\r\n                console.log('Failed to get board: ' + boardID);\r\n            }\r\n        );\r\n    };\r\n\r\n    resetTaskData = () => {\r\n        /** Reset taskData variable */\r\n        this.taskData = { tasks: {}, columns: {}, columnOrder: [] };\r\n    };\r\n\r\n    getListTaskData = (boardID, success) => {\r\n        /**\r\n         * Gets all the lists on a given board with boardID. Return a successfully parsed lists\r\n         * and tasks data object for Drag and Drop functionality through the success callback.\r\n         */\r\n        this.resetTaskData();\r\n\r\n        this.Trello.get(\r\n            '/boards/' + boardID + '/lists',\r\n            function(lists) {\r\n                console.log('Lists loaded succesfully');\r\n                this.getTasksFromLists(lists, success);\r\n            }.bind(this),\r\n            function() {\r\n                console.log('Failed to load lists');\r\n            }\r\n        );\r\n    };\r\n\r\n    getTasksFromLists = (lists, success) => {\r\n        /**\r\n         * Gets all the tasks from a set of lists from the lists argument. Return a successfully\r\n         * parsed lists and tasks data object for Drag and Drop functionality through the success\r\n         * callback.\r\n         */\r\n        if (lists.length === 0) {\r\n            // Check if board contains lists.\r\n            success(this.taskData);\r\n            console.log('Successfully parsed list/task data');\r\n        }\r\n\r\n        // Loop through each list in the board to get and process each list's set of tasks\r\n        console.log('Getting Tasks');\r\n        var itemsProcessed = 0;\r\n        lists.forEach(element => {\r\n            this.Trello.get(\r\n                '/lists/' + element.id + '/cards',\r\n                function(tasks) {\r\n                    this.processTaskData({ ...element, tasks });\r\n                    itemsProcessed++;\r\n                    if (itemsProcessed === lists.length) {\r\n                        // Check if all task data has finished fetching.\r\n                        success(this.taskData);\r\n                        console.log('Successfully parsed list/task data');\r\n                    }\r\n                }.bind(this),\r\n                function() {\r\n                    console.log('Failed to load cards');\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    processTaskData = data => {\r\n        /**\r\n         * Format the input task list data from fetch operations to be used by Drag and\r\n         * Drop functionality and returns through the global taskData variable\r\n         */\r\n        // Generate columns data.\r\n        this.taskData.columns[data.id] = {\r\n            ...data,\r\n            taskIds: []\r\n        };\r\n        // Generate tasks data\r\n        data.tasks.forEach(element => {\r\n            this.taskData.columns[data.id].taskIds.push(element.id);\r\n            this.taskData.tasks[element.id] = { ...element };\r\n        });\r\n        // Generate columnOrder data\r\n        this.taskData.columnOrder.push(data.id);\r\n    };\r\n\r\n    dragToNewColumn(finishID, taskID) {\r\n        /**\r\n         * Handles dragging a task (card) from one column (list) to a new\r\n         * column. finishID is the destination column's Trello ID and taskID\r\n         * is the ID of the Trello card being dragged.\r\n         */\r\n        this.Trello.put(\r\n            '/cards/' + taskID + '?idList=' + finishID,\r\n            function(r) {\r\n                console.log('Card drag successful');\r\n            },\r\n            function() {\r\n                console.log('Card drag unsuccessful');\r\n            }\r\n        );\r\n    }\r\n\r\n    addNewTask = (columnID, newTaskName, success) => {\r\n        /**\r\n         * Adds a new task (card) to a list. ColumnID is Trello ID of list that\r\n         * is being added to, newTaskName is name of the new task being added,\r\n         * and the success callback function receives the newly created Trello task\r\n         * object.\r\n         */\r\n        this.Trello.post(\r\n            '/cards?name=' + newTaskName + '&idList=' + columnID,\r\n            function(c) {\r\n                success(c);\r\n                console.log('Card create successful');\r\n            },\r\n            function() {\r\n                console.log('Card create unsuccessful');\r\n            }\r\n        );\r\n    };\r\n}\r\n\r\nexport default TrelloHandler;\r\n","import React, { Component } from 'react';\r\nimport Login from './components/Login/Login';\r\nimport Main from './components/Main/Main.jsx';\r\nimport TrelloHandler from './TrelloHandler.js';\r\n\r\nclass App extends Component {\r\n    Trello = new TrelloHandler(window.Trello);\r\n    state = {\r\n        authorized: false\r\n    };\r\n\r\n    onLogin = () => {\r\n        /** Log In button pressed */\r\n        console.log('Login Request');\r\n        this.Trello.authorize(this.verifyAuthorize);\r\n    };\r\n\r\n    verifyAuthorize = success => {\r\n        /** Callback function to verify if Trello authentication was successful.  */\r\n        if (success) {\r\n            this.setState({ authorized: true });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (!this.state.authorized) {\r\n            return <Login onLogin={this.onLogin} />;\r\n        } else {\r\n            return <Main trelloHandler={this.Trello} />;\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App.jsx\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}