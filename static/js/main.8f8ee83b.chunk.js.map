{"version":3,"sources":["components/Login/Login.jsx","components/NavBar/SelectBoard.jsx","components/NavBar/NavBar.jsx","components/Board/TList/ListItem/ListItem.jsx","components/Board/TList/TList.jsx","components/Board/Board.jsx","components/Main/Main.jsx","TrelloHandler.js","App.jsx","serviceWorker.js","index.js"],"names":["Login","react_default","a","createElement","Fragment","className","onClick","this","props","onLogin","type","href","Component","SelectBoard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","boards","generateBoardList","map","b","key","id","value","name","trelloHandler","loadBoards","setState","onChange","onSelect","NavBar","memberID","generateAccountLink","getMember","m","NavBar_SelectBoard","title","ListItem","_this2","react_beautiful_dnd_esm","draggableId","task","index","provided","snapshot","assign","isDragging","draggableProps","dragHandleProps","ref","innerRef","onDeleteTask","TList","addingNewTask","newTask","handleNewTaskChange","event","target","onSubmitNewTask","preventDefault","addNewTask","column","onAddNewTask","handleClick","e","node","contains","exitForm","handleKeyDown","keyCode","document","removeEventListener","addEventListener","onSubmit","placeholder","_this3","droppableId","droppableProps","tasks","TList_ListItem_ListItem","newTaskButton","Packery","window","Draggabilly","Board","data","lists","pckry","newData","objectSpread","columns","idList","taskIds","push","deleteTask","taskDeleted","columnID","taskID","start","startTaskIds","Array","from","splice","indexOf","newStart","defineProperty","onDragEnd","result","destination","source","finish","_objectSpread4","finishTaskIds","newFinish","dragToNewColumn","elem","querySelector","itemSelector","columnWidth","gutter","percentPosition","getItemElements","forEach","itemElem","draggie","handle","bindDraggabillyEvents","layout","destroy","reloadItems","columnOrder","columnId","taskId","Board_TList_TList","Main","selectedBoard","console","log","handleSelect","getBoard","boardSelected","boardDeselected","loadLists","setBackground","getListTaskData","resetTaskData","selected","body","style","backgroundImage","prefs","l","callback","arguments","length","undefined","components_Board_Board","components_NavBar_NavBar","selectBoardMessage","generateBoard","TrelloHandler","Trello","authorize","scope","read","write","expiration","success","authorized","bind","error","get","boardID","deselect","taskData","getTasksFromLists","itemsProcessed","element","processTaskData","newTaskName","post","c","delete","member","finishID","put","r","App","verifyAuthorize","components_Main_Main","components_Login_Login","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f8ee83b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Login.css';\r\n\r\nclass Login extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"container login-container\">\r\n                    <div className=\"panel text-center center-block\">\r\n                        <h1 className=\"title\">mello</h1>\r\n                        <button\r\n                            onClick={this.props.onLogin}\r\n                            type=\"button\"\r\n                            className=\"btn login-btn\"\r\n                        >\r\n                            Log In with Trello\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"created-by\">\r\n                    <p>\r\n                        Created by:{' '}\r\n                        <a href=\"https://github.com/15huangtimothy/\">\r\n                            Tim Huang\r\n                        </a>\r\n                    </p>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SelectBoard extends Component {\r\n    state = {\r\n        boards: null\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n        this.props.trelloHandler.loadBoards(b => {\r\n            this.setState({ boards: b });\r\n        });\r\n    }\r\n\r\n    generateBoardList = () => {\r\n        /** Generate dropdown list of boards */\r\n        return this.state.boards.map(b => (\r\n            <option key={b.id} value={b.id}>\r\n                {b.name}\r\n            </option>\r\n        ));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <select\r\n                className=\"form-control select-board\"\r\n                onChange={this.props.onSelect}\r\n            >\r\n                <option key={-1} value={-1}>\r\n                    Select Board\r\n                </option>\r\n                {this.state.boards && this.generateBoardList()}\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectBoard;\r\n","import React, { Component } from 'react';\r\nimport SelectBoard from './SelectBoard';\r\nimport './NavBar.css';\r\n\r\nclass NavBar extends Component {\r\n    state = { memberID: null };\r\n    constructor(props) {\r\n        super(props);\r\n        this.props.trelloHandler.getMember(m => {\r\n            this.setState({ memberID: m.id });\r\n        });\r\n    }\r\n\r\n    generateAccountLink = () => {\r\n        /** Generates a link to the user's Trello account settings page */\r\n        if (this.state.memberID) {\r\n            return 'https://trello.com/' + this.state.memberID + '/account';\r\n        } else {\r\n            return '#';\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar\">\r\n                <div className=\"col-sm-3 text-left\">\r\n                    <ul className=\"navbar-nav align-middle\">\r\n                        <li className=\"nav-item\">\r\n                            <SelectBoard\r\n                                trelloHandler={this.props.trelloHandler}\r\n                                onSelect={this.props.onSelect}\r\n                            />\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"col-sm-6\">\r\n                    <h1 className=\"title navbar-title align-middle\">mello</h1>\r\n                </div>\r\n                <div className=\"col-sm-3 text-right\">\r\n                    <a\r\n                        href={this.generateAccountLink()}\r\n                        className=\"account-icon align-middle\"\r\n                    >\r\n                        <i\r\n                            className=\"material-icons align-middle\"\r\n                            title=\"Account Settings\"\r\n                        >\r\n                            account_circle\r\n                        </i>\r\n                    </a>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport './ListItem.css';\r\n\r\nclass ListItem extends Component {\r\n    state = {};\r\n\r\n    render() {\r\n        return (\r\n            <Draggable\r\n                draggableId={this.props.task.id}\r\n                index={this.props.index}\r\n            >\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                        className={\r\n                            'list-item' +\r\n                            (snapshot.isDragging ? ' on-drag' : '')\r\n                        }\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        <p>{this.props.task.name}</p>\r\n                        <i\r\n                            className=\"far fa-check-square\"\r\n                            title=\"Delete Task\"\r\n                            onClick={() => {\r\n                                this.props.onDeleteTask(this.props.task);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListItem;\r\n","import React, { Component } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport ListItem from './ListItem/ListItem';\r\nimport './TList.css';\r\n\r\nclass TList extends Component {\r\n    state = { addingNewTask: false, newTask: null };\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClick, false);\r\n        document.removeEventListener('keydown', this.handleKeyDown, false);\r\n    }\r\n\r\n    newTaskButton() {\r\n        /**\r\n         * Conditionally generates and returns the add new task button\r\n         * or input field for entering a new task name.\r\n         */\r\n        document.removeEventListener('mousedown', this.handleClick, false);\r\n        document.removeEventListener('keydown', this.handleKeyDown, false);\r\n        if (this.state.addingNewTask) {\r\n            // Add listeners to detect when to exit form.\r\n            document.addEventListener('mousedown', this.handleClick, false);\r\n            document.addEventListener('keydown', this.handleKeyDown, false);\r\n            return (\r\n                <form\r\n                    className=\"new-task-container\"\r\n                    ref={node => (this.node = node)}\r\n                    onSubmit={this.onSubmitNewTask}\r\n                >\r\n                    <input\r\n                        className=\"form-control new-task-input\"\r\n                        type=\"text\"\r\n                        value={this.state.value}\r\n                        placeholder=\"Enter New Task\"\r\n                        onChange={this.handleNewTaskChange}\r\n                    />\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Add\"\r\n                        className=\"btn btn-new-task-submit\"\r\n                    />\r\n                </form>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"new-task-container\">\r\n                    <button\r\n                        className=\"btn btn-new-task\"\r\n                        title=\"Add New Task\"\r\n                        onClick={() => {\r\n                            this.setState({ addingNewTask: true });\r\n                        }}\r\n                    >\r\n                        <i className=\"material-icons add-icon\">add</i>\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    handleNewTaskChange = event => {\r\n        /** Handles changes to the input field when entering a new task name */\r\n        this.setState({ newTask: event.target.value });\r\n    };\r\n\r\n    onSubmitNewTask = event => {\r\n        /** Handles submit button when creating a new task */\r\n        event.preventDefault();\r\n        if (!this.state.newTask) {\r\n            return;\r\n        }\r\n        this.props.trelloHandler.addNewTask(\r\n            this.props.column.id,\r\n            this.state.newTask,\r\n            this.props.onAddNewTask\r\n        );\r\n        this.setState({ addingNewTask: false, newTask: null });\r\n    };\r\n\r\n    handleClick = e => {\r\n        if (!this.node.contains(e.target)) {\r\n            // Checks if click is outside of component area\r\n            this.exitForm();\r\n        }\r\n    };\r\n\r\n    exitForm = () => {\r\n        /**\r\n         * Exits form to add a new task when escape is pressed or mouse\r\n         * is clicked outside of component area.\r\n         */\r\n        this.setState({ addingNewTask: false, newTask: null });\r\n    };\r\n\r\n    handleKeyDown = e => {\r\n        if (e.keyCode === 27) {\r\n            // Detects escape key button presses\r\n            this.exitForm();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"grid-item\">\r\n                <div className=\"card t-list\">\r\n                    <div className=\"card-header handle\">\r\n                        <p className=\"card-title\">{this.props.column.name}</p>\r\n                    </div>\r\n                    <Droppable droppableId={this.props.column.id} type=\"task\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                className=\"list-item-container\"\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}\r\n                            >\r\n                                {this.props.tasks.map((task, index) => (\r\n                                    <ListItem\r\n                                        key={task.id}\r\n                                        task={task}\r\n                                        index={index}\r\n                                        onDeleteTask={this.props.onDeleteTask}\r\n                                    />\r\n                                ))}\r\n                                {provided.placeholder}\r\n                                {this.newTaskButton()}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TList;\r\n","import React, { Component } from 'react';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport TList from './TList/TList';\r\nimport './Board.css';\r\n\r\nconst Packery = window.Packery;\r\nconst Draggabilly = window.Draggabilly;\r\n\r\nclass Board extends Component {\r\n    state = {\r\n        data: this.props.lists,\r\n        pckry: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        // Set up Packery and Draggabilly\r\n        var elem = document.querySelector('.grid');\r\n        var pckry = new Packery(elem, {\r\n            itemSelector: '.grid-item',\r\n            columnWidth: '.grid-sizer',\r\n            gutter: '.gutter-sizer',\r\n            percentPosition: true\r\n        });\r\n        this.setState({ pckry: pckry });\r\n        pckry.getItemElements().forEach(function(itemElem) {\r\n            var draggie = new Draggabilly(itemElem, { handle: '.handle' });\r\n            pckry.bindDraggabillyEvents(draggie);\r\n        });\r\n        pckry.layout();\r\n    }\r\n\r\n    compomentDidUnmount() {\r\n        this.state.pckry.destroy();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.pckry) {\r\n            this.state.pckry.reloadItems();\r\n            this.state.pckry.layout();\r\n        }\r\n    }\r\n\r\n    addNewTask = task => {\r\n        /**\r\n         * Handles when a new task is added to a lsit. Updates\r\n         * the state list data with new task included.\r\n         */\r\n        let newData = { ...this.state.data };\r\n        newData.columns[task.idList].taskIds.push(task.id);\r\n        newData.tasks[task.id] = { ...task };\r\n        this.setState({ data: newData });\r\n    };\r\n\r\n    deleteTask = task => {\r\n        /**\r\n         * Handles when a task is to be deleted.\r\n         */\r\n        this.props.trelloHandler.deleteTask(\r\n            task.idList,\r\n            task.id,\r\n            this.taskDeleted\r\n        );\r\n    };\r\n\r\n    taskDeleted = (columnID, taskID) => {\r\n        /**\r\n         * Executes when a task is deleted. Updates the state list\r\n         * data to remove the task. columnID is id of column containing\r\n         * deleted task and taskID is the deleted task's id.\r\n         */\r\n        const start = this.state.data.columns[columnID];\r\n        const startTaskIds = Array.from(start.taskIds);\r\n\r\n        startTaskIds.splice(startTaskIds.indexOf(taskID), 1);\r\n        const newStart = {\r\n            ...start,\r\n            taskIds: startTaskIds\r\n        };\r\n        const newData = {\r\n            ...this.state.data,\r\n            columns: {\r\n                ...this.state.data.columns,\r\n                [newStart.id]: newStart\r\n            }\r\n        };\r\n        this.setState({ data: newData });\r\n    };\r\n\r\n    onDragEnd = result => {\r\n        /** Handle drag for list items */\r\n        const { destination, source, draggableId } = result;\r\n\r\n        if (!destination) {\r\n            // If dragged out of area\r\n            return;\r\n        }\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) {\r\n            // If dragged back to same place\r\n            return;\r\n        }\r\n\r\n        const start = this.state.data.columns[source.droppableId];\r\n        const finish = this.state.data.columns[destination.droppableId];\r\n\r\n        // Change starting column\r\n        const startTaskIds = Array.from(start.taskIds);\r\n        startTaskIds.splice(source.index, 1);\r\n        const newStart = {\r\n            ...start,\r\n            taskIds: startTaskIds\r\n        };\r\n\r\n        if (start === finish) {\r\n            // If drag is within same column\r\n            startTaskIds.splice(destination.index, 0, draggableId);\r\n            const newData = {\r\n                ...this.state.data,\r\n                columns: {\r\n                    ...this.state.data.columns,\r\n                    [newStart.id]: newStart\r\n                }\r\n            };\r\n            this.setState({ data: newData });\r\n        } else {\r\n            // If drag is to a different column\r\n            const finishTaskIds = Array.from(finish.taskIds);\r\n            finishTaskIds.splice(destination.index, 0, draggableId);\r\n            const newFinish = {\r\n                ...finish,\r\n                taskIds: finishTaskIds\r\n            };\r\n            const newData = {\r\n                ...this.state.data,\r\n                columns: {\r\n                    ...this.state.data.columns,\r\n                    [newStart.id]: newStart,\r\n                    [newFinish.id]: newFinish\r\n                }\r\n            };\r\n            this.setState({ data: newData });\r\n            this.props.trelloHandler.dragToNewColumn(finish.id, draggableId);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.state.data) {\r\n            return (\r\n                <DragDropContext onDragEnd={this.onDragEnd}>\r\n                    <div className=\"container container-board\">\r\n                        <div className=\"grid\">\r\n                            <div className=\"gutter-sizer\" />\r\n                            <div className=\"grid-sizer\" />\r\n                            {this.state.data.columnOrder.map(\r\n                                (columnId, index) => {\r\n                                    const column = this.state.data.columns[\r\n                                        columnId\r\n                                    ];\r\n                                    const tasks = column.taskIds.map(\r\n                                        taskId => this.state.data.tasks[taskId]\r\n                                    );\r\n                                    return (\r\n                                        <TList\r\n                                            key={column.id}\r\n                                            column={column}\r\n                                            tasks={tasks}\r\n                                            index={index}\r\n                                            trelloHandler={\r\n                                                this.props.trelloHandler\r\n                                            }\r\n                                            onAddNewTask={this.addNewTask}\r\n                                            onDeleteTask={this.deleteTask}\r\n                                        />\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </DragDropContext>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\nimport NavBar from '../NavBar/NavBar';\r\nimport Board from '../Board/Board';\r\nimport './Main.css';\r\n\r\nclass Main extends Component {\r\n    state = { selectedBoard: null, lists: null };\r\n\r\n    handleClick = () => {\r\n        console.log(this.props.trelloHandler.boards);\r\n    };\r\n\r\n    handleSelect = event => {\r\n        /** Board is selected. event.target.value returns board id. */\r\n        this.props.trelloHandler.getBoard(\r\n            event.target.value,\r\n            b => {\r\n                this.setState({ selectedBoard: b }, this.boardSelected);\r\n            },\r\n            () => {\r\n                this.setState(\r\n                    { selectedBoard: null, lists: null },\r\n                    this.boardDeselected\r\n                );\r\n            }\r\n        );\r\n    };\r\n\r\n    boardSelected = () => {\r\n        /** Executes once a board is selected */\r\n        this.boardDeselected();\r\n        // Reset lists before loading new lists\r\n        this.loadLists(null, () => {\r\n            this.setBackground(true);\r\n            this.props.trelloHandler.getListTaskData(\r\n                this.state.selectedBoard.id,\r\n                this.loadLists\r\n            );\r\n        });\r\n    };\r\n\r\n    boardDeselected = () => {\r\n        /** Executes when no board is selected */\r\n        this.setBackground(false);\r\n        this.props.trelloHandler.resetTaskData();\r\n    };\r\n\r\n    setBackground = selected => {\r\n        /** Set background image to selected board's background image */\r\n        if (!selected) {\r\n            document.body.style.backgroundImage = 'none';\r\n        } else if (this.state.selectedBoard) {\r\n            document.body.style.backgroundImage =\r\n                'url(' + this.state.selectedBoard.prefs.backgroundImage + ')';\r\n        }\r\n    };\r\n\r\n    loadLists = (l, callback = function() {}) => {\r\n        /**\r\n         * Callback function when list/task data is done processing by TrelloHandler.\r\n         * List/task data returned through l.\r\n         */\r\n        this.setState({ lists: l }, callback);\r\n    };\r\n\r\n    generateBoard() {\r\n        /** Returns Board object containing loaded lists and tasks */\r\n        return (\r\n            <Board\r\n                lists={this.state.lists}\r\n                trelloHandler={this.props.trelloHandler}\r\n            />\r\n        );\r\n    }\r\n\r\n    selectBoardMessage() {\r\n        return <h2 className=\"select-board-message\">Please Select a Board</h2>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar\r\n                    trelloHandler={this.props.trelloHandler}\r\n                    onSelect={this.handleSelect}\r\n                />\r\n                {!this.state.selectedBoard && this.selectBoardMessage()}\r\n                {this.state.lists && this.generateBoard()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// {this.state.boards && this.generateBoardList()}\r\nexport default Main;\r\n","class TrelloHandler {\r\n    constructor(Trello) {\r\n        this.Trello = Trello;\r\n        this.authorized = false;\r\n        this.boards = null;\r\n        this.member = null;\r\n        this.taskData = { tasks: {}, columns: {}, columnOrder: [] };\r\n    }\r\n\r\n    authorize = callback => {\r\n        /** Authorize Trello Account. Returns true to callback if authorization successful. */\r\n        this.Trello.authorize({\r\n            type: 'popup',\r\n            name: 'mello',\r\n            scope: {\r\n                read: true,\r\n                write: true\r\n            },\r\n            expiration: 'never',\r\n            success: function() {\r\n                callback(true);\r\n                this.authorized = true;\r\n                console.log('Authorization Successful');\r\n            }.bind(this),\r\n            error: function() {\r\n                callback(false);\r\n                console.log('Authorization Failed');\r\n            }\r\n        });\r\n    };\r\n\r\n    getMember = success => {\r\n        /** Load Trello user data. Returns through success callback function */\r\n        this.Trello.get(\r\n            '/members/me',\r\n            function(m) {\r\n                success(m);\r\n                console.log('User loaded succesfully');\r\n            },\r\n            function() {\r\n                console.log('Failed to load member');\r\n            }\r\n        );\r\n    };\r\n\r\n    loadBoards = success => {\r\n        /**\r\n         * Gets user's active boards. Returns board list with success callback function.\r\n         */\r\n        this.Trello.get(\r\n            '/members/me/boards?filter=open',\r\n            function(b) {\r\n                console.log('Boards loaded');\r\n                success(b);\r\n                this.boards = b;\r\n            }.bind(this),\r\n            function() {\r\n                console.log('Failed to load boards');\r\n            }\r\n        );\r\n    };\r\n\r\n    getBoard = (boardID, success, deselect) => {\r\n        /**\r\n         * Gets Trello board object from board ID. Returns board object with success callback function.\r\n         * Deselect called when \"Select Board\" default option is selected\r\n         */\r\n        if (boardID === '-1') {\r\n            deselect();\r\n            return;\r\n        }\r\n        this.Trello.get(\r\n            '/boards/' + boardID,\r\n            function(b) {\r\n                success(b);\r\n            },\r\n            function() {\r\n                console.log('Failed to get board: ' + boardID);\r\n            }\r\n        );\r\n    };\r\n\r\n    resetTaskData = () => {\r\n        /** Reset taskData variable */\r\n        this.taskData = { tasks: {}, columns: {}, columnOrder: [] };\r\n    };\r\n\r\n    getListTaskData = (boardID, success) => {\r\n        /**\r\n         * Gets all the lists on a given board with boardID. Return a successfully parsed lists\r\n         * and tasks data object for Drag and Drop functionality through the success callback.\r\n         */\r\n        this.resetTaskData();\r\n\r\n        this.Trello.get(\r\n            '/boards/' + boardID + '/lists',\r\n            function(lists) {\r\n                console.log('Lists loaded succesfully');\r\n                this.getTasksFromLists(lists, success);\r\n            }.bind(this),\r\n            function() {\r\n                console.log('Failed to load lists');\r\n            }\r\n        );\r\n    };\r\n\r\n    getTasksFromLists = (lists, success) => {\r\n        /**\r\n         * Gets all the tasks from a set of lists from the lists argument. Return a successfully\r\n         * parsed lists and tasks data object for Drag and Drop functionality through the success\r\n         * callback.\r\n         */\r\n        if (lists.length === 0) {\r\n            // Check if board contains lists.\r\n            success(this.taskData);\r\n            console.log('Successfully parsed list/task data');\r\n        }\r\n\r\n        // Loop through each list in the board to get and process each list's set of tasks\r\n        console.log('Getting Tasks');\r\n        var itemsProcessed = 0;\r\n        lists.forEach(element => {\r\n            this.Trello.get(\r\n                '/lists/' + element.id + '/cards',\r\n                function(tasks) {\r\n                    this.processTaskData({ ...element, tasks });\r\n                    itemsProcessed++;\r\n                    if (itemsProcessed === lists.length) {\r\n                        // Check if all task data has finished fetching.\r\n                        success(this.taskData);\r\n                        console.log('Successfully parsed list/task data');\r\n                    }\r\n                }.bind(this),\r\n                function() {\r\n                    console.log('Failed to load cards');\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    processTaskData = data => {\r\n        /**\r\n         * Format the input task list data from fetch operations to be used by Drag and\r\n         * Drop functionality and returns through the global taskData variable\r\n         */\r\n        // Generate columns data.\r\n        this.taskData.columns[data.id] = {\r\n            ...data,\r\n            taskIds: []\r\n        };\r\n        // Generate tasks data\r\n        data.tasks.forEach(element => {\r\n            this.taskData.columns[data.id].taskIds.push(element.id);\r\n            this.taskData.tasks[element.id] = { ...element };\r\n        });\r\n        // Generate columnOrder data\r\n        this.taskData.columnOrder.push(data.id);\r\n    };\r\n\r\n    dragToNewColumn(finishID, taskID) {\r\n        /**\r\n         * Handles dragging a task (card) from one column (list) to a new\r\n         * column. finishID is the destination column's Trello ID and taskID\r\n         * is the ID of the Trello card being dragged.\r\n         */\r\n        this.Trello.put(\r\n            '/cards/' + taskID + '?idList=' + finishID,\r\n            function(r) {\r\n                console.log('Card drag successful');\r\n            },\r\n            function() {\r\n                console.log('Card drag unsuccessful');\r\n            }\r\n        );\r\n    }\r\n\r\n    addNewTask = (columnID, newTaskName, success) => {\r\n        /**\r\n         * Adds a new task (card) to a list. columnID is Trello ID of list that\r\n         * is being added to, newTaskName is name of the new task being added,\r\n         * and the success callback function receives the newly created Trello task\r\n         * object.\r\n         */\r\n        this.Trello.post(\r\n            '/cards?name=' + newTaskName + '&idList=' + columnID,\r\n            function(c) {\r\n                success(c);\r\n                console.log('Card create successful');\r\n            },\r\n            function() {\r\n                console.log('Card create unsuccessful');\r\n            }\r\n        );\r\n    };\r\n\r\n    deleteTask = (columnID, taskID, success) => {\r\n        /**\r\n         * Deletes a task. columID is Trello ID of list containing the task\r\n         * to be deleted, taskID is Trello ID of card to be deleted, and success\r\n         * callbackback function receives the columnID and taskID.\r\n         */\r\n        this.Trello.delete(\r\n            '/cards/' + taskID,\r\n            function() {\r\n                success(columnID, taskID);\r\n                console.log('Card delete successful');\r\n            },\r\n            function() {\r\n                console.log('Card delete unsuccessful');\r\n            }\r\n        );\r\n    };\r\n}\r\n\r\nexport default TrelloHandler;\r\n","import React, { Component } from 'react';\r\nimport Login from './components/Login/Login';\r\nimport Main from './components/Main/Main.jsx';\r\nimport TrelloHandler from './TrelloHandler.js';\r\n\r\nclass App extends Component {\r\n    Trello = new TrelloHandler(window.Trello);\r\n    state = {\r\n        authorized: false\r\n    };\r\n\r\n    onLogin = () => {\r\n        /** Log In button pressed */\r\n        console.log('Login Request');\r\n        this.Trello.authorize(this.verifyAuthorize);\r\n    };\r\n\r\n    verifyAuthorize = success => {\r\n        /** Callback function to verify if Trello authentication was successful.  */\r\n        if (success) {\r\n            this.setState({ authorized: true });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (!this.state.authorized) {\r\n            return <Login onLogin={this.onLogin} />;\r\n        } else {\r\n            return <Main trelloHandler={this.Trello} />;\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}