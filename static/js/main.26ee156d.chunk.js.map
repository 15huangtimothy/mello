{"version":3,"sources":["components/Login/Login.jsx","components/NavBar/SelectBoard.jsx","components/NavBar/NavBar.jsx","components/Main/Main.jsx","TrelloHandler.js","App.jsx","serviceWorker.js","index.js"],"names":["Login","state","react_default","a","createElement","className","onClick","this","props","onLogin","type","Component","SelectBoard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","boards","generateBoardList","map","b","key","id","value","name","trelloHandler","loadBoards","setState","onChange","onSelect","NavBar","NavBar_SelectBoard","Main","selectedBoard","handleClick","console","log","handleSelect","event","getBoard","target","boardSelected","setBackground","document","body","style","backgroundImage","prefs","components_NavBar_NavBar","TrelloHandler","Trello","authorize","callback","scope","read","write","expiration","success","authorized","bind","error","get","boardID","App","window","verifyAuthorize","components_Main_Main","components_Login_Login","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAwBeA,0NApBXC,MAAQ,2EAGJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UACAH,EAAAC,EAAAC,cAAA,UACIE,QAASC,KAAKC,MAAMC,QACpBC,KAAK,SACLL,UAAU,iBAHd,+BARAM,cCkCLC,cA/BX,SAAAA,EAAYJ,GAAO,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMC,KAJVP,MAAQ,CACJkB,OAAQ,MAEON,EAOnBO,kBAAoB,WAEhB,OAAOP,EAAKZ,MAAMkB,OAAOE,IAAI,SAAAC,GAAC,OAC1BpB,EAAAC,EAAAC,cAAA,UAAQmB,IAAKD,EAAEE,GAAIC,MAAOH,EAAEE,IACvBF,EAAEI,SATXb,EAAKL,MAAMmB,cAAcC,WAAW,SAAAN,GAChCT,EAAKgB,SAAS,CAAEV,OAAQG,MAHbT,wEAiBf,OACIX,EAAAC,EAAAC,cAAA,UACIC,UAAU,4BACVyB,SAAUvB,KAAKC,MAAMuB,UAErB7B,EAAAC,EAAAC,cAAA,UAAQmB,KAAM,EAAGE,OAAQ,GAAzB,gBAGClB,KAAKN,MAAMkB,QAAUZ,KAAKa,4BA7BjBT,aC8BXqB,oNA3BX/B,MAAQ,2EAEJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAC6B,EAAD,CACIN,cAAepB,KAAKC,MAAMmB,cAC1BI,SAAUxB,KAAKC,MAAMuB,cAKrC7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCAAd,WAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4CAAb,2BAnBCM,cCyCNuB,6MAzCXjC,MAAQ,CAAEkC,cAAe,QAEzBC,YAAc,WACVC,QAAQC,IAAIzB,EAAKL,MAAMmB,cAAcR,WAGzCoB,aAAe,SAAAC,GAEX3B,EAAKL,MAAMmB,cAAcc,SAASD,EAAME,OAAOjB,MAAO,SAAAH,GAClDT,EAAKgB,SAAS,CAAEM,cAAeb,GAAKT,EAAK8B,oBAIjDA,cAAgB,WAEZ9B,EAAK+B,mBAGTA,cAAgB,WAER/B,EAAKZ,MAAMkC,gBACXU,SAASC,KAAKC,MAAMC,gBAChB,OAASnC,EAAKZ,MAAMkC,cAAcc,MAAMD,gBAAkB,8EAKlE,OACI9C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8C,EAAD,CACIvB,cAAepB,KAAKC,MAAMmB,cAC1BI,SAAUxB,KAAKgC,eAEnBrC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAK6B,aAAlD,cAlCGzB,aC8DJwC,EAhEX,SAAAA,EAAYC,GAAQ,IAAAvC,EAAAN,KAAAO,OAAAC,EAAA,EAAAD,CAAAP,KAAA4C,GAAA5C,KAMpB8C,UAAY,SAAAC,GAERzC,EAAKuC,OAAOC,UAAU,CAClB3C,KAAM,QACNgB,KAAM,QACN6B,MAAO,CACHC,MAAM,EACNC,OAAO,GAEXC,WAAY,QACZC,QAAS,WACLL,GAAS,GACT/C,KAAKqD,YAAa,EAClBvB,QAAQC,IAAI,6BACduB,KAAKhD,GACPiD,MAAO,WACHR,GAAS,GACTjB,QAAQC,IAAI,4BAvBJ/B,KA4BpBqB,WAAa,SAAA+B,GAIT9C,EAAKuC,OAAOW,IACR,iCACA,SAASzC,GACLe,QAAQC,IAAI,iBACZqB,EAAQrC,GACRf,KAAKY,OAASG,GAChBuC,KAAKhD,GACP,WACIwB,QAAQC,IAAI,4BAxCJ/B,KA6CpBkC,SAAW,SAACuB,EAASL,GAID,OAAZK,GAGJnD,EAAKuC,OAAOW,IACR,WAAaC,EACb,SAAS1C,GACLqC,EAAQrC,IAEZ,WACIe,QAAQC,IAAI,wBAA0B0B,MAzD9CzD,KAAK6C,OAASA,EACd7C,KAAKqD,YAAa,EAClBrD,KAAKY,OAAS,MC8BP8C,6MA3BXb,OAAS,IAAID,EAAce,OAAOd,UAClCnD,MAAQ,CACJ2D,YAAY,KAGhBnD,QAAU,WAEN4B,QAAQC,IAAI,iBACZzB,EAAKuC,OAAOC,UAAUxC,EAAKsD,oBAG/BA,gBAAkB,SAAAR,GAEVA,GACA9C,EAAKgB,SAAS,CAAE+B,YAAY,6EAKhC,OAAKrD,KAAKN,MAAM2D,WAGL1D,EAAAC,EAAAC,cAACgE,EAAD,CAAMzC,cAAepB,KAAK6C,SAF1BlD,EAAAC,EAAAC,cAACiE,EAAD,CAAO5D,QAASF,KAAKE,iBArBtBE,aCME2D,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAAS/B,SAASgC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.26ee156d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Login.css\";\n\nclass Login extends Component {\n    state = {};\n\n    render() {\n        return (\n            <div className=\"container login-container\">\n                <div className=\"panel text-center center-block\">\n                    <h1 className=\"title\">mello.</h1>\n                    <button\n                        onClick={this.props.onLogin}\n                        type=\"button\"\n                        className=\"btn login-btn\"\n                    >\n                        Log In with Trello\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\n\nclass SelectBoard extends Component {\n    state = {\n        boards: null\n    };\n    constructor(props) {\n        super(props);\n        this.props.trelloHandler.loadBoards(b => {\n            this.setState({ boards: b });\n        });\n    }\n\n    generateBoardList = () => {\n        /** Generate dropdown list of boards */\n        return this.state.boards.map(b => (\n            <option key={b.id} value={b.id}>\n                {b.name}\n            </option>\n        ));\n    };\n\n    render() {\n        return (\n            <select\n                className=\"form-control select-board\"\n                onChange={this.props.onSelect}\n            >\n                <option key={-1} value={-1}>\n                    Select Board\n                </option>\n                {this.state.boards && this.generateBoardList()}\n            </select>\n        );\n    }\n}\n\nexport default SelectBoard;\n","import React, { Component } from \"react\";\nimport SelectBoard from \"./SelectBoard\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n    state = {};\n    render() {\n        return (\n            <nav className=\"navbar\">\n                <div className=\"col-sm-3 text-left\">\n                    <ul className=\"navbar-nav align-middle\">\n                        <li className=\"nav-item\">\n                            <SelectBoard\n                                trelloHandler={this.props.trelloHandler}\n                                onSelect={this.props.onSelect}\n                            />\n                        </li>\n                    </ul>\n                </div>\n                <div className=\"col-sm-6\">\n                    <h1 className=\"title navbar-title align-middle\">mello.</h1>\n                </div>\n                <div className=\"col-sm-3 text-right\">\n                    <i className=\"material-icons account-icon align-middle\">\n                        account_circle\n                    </i>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport NavBar from \"../NavBar/NavBar\";\n\nclass Main extends Component {\n    state = { selectedBoard: null };\n\n    handleClick = () => {\n        console.log(this.props.trelloHandler.boards);\n    };\n\n    handleSelect = event => {\n        /** Board is selected. event.target.value returns board id. */\n        this.props.trelloHandler.getBoard(event.target.value, b => {\n            this.setState({ selectedBoard: b }, this.boardSelected);\n        });\n    };\n\n    boardSelected = () => {\n        /** Executes once a board is selected */\n        this.setBackground();\n    };\n\n    setBackground = () => {\n        /** Set background image to selected board's background image */\n        if (this.state.selectedBoard) {\n            document.body.style.backgroundImage =\n                \"url(\" + this.state.selectedBoard.prefs.backgroundImage + \")\";\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <NavBar\n                    trelloHandler={this.props.trelloHandler}\n                    onSelect={this.handleSelect}\n                />\n                <button className=\"btn btn-primary\" onClick={this.handleClick}>\n                    Hi\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","class TrelloHandler {\n    constructor(Trello) {\n        this.Trello = Trello;\n        this.authorized = false;\n        this.boards = null;\n    }\n\n    authorize = callback => {\n        /** Authorize Trello Account. Returns true to callback if authorization successful. */\n        this.Trello.authorize({\n            type: \"popup\",\n            name: \"mello\",\n            scope: {\n                read: true,\n                write: true\n            },\n            expiration: \"never\",\n            success: function() {\n                callback(true);\n                this.authorized = true;\n                console.log(\"Authorization Successful\");\n            }.bind(this),\n            error: function() {\n                callback(false);\n                console.log(\"Authorization Failed\");\n            }\n        });\n    };\n\n    loadBoards = success => {\n        /**\n         * Gets user's active boards. Returns board list with success callback function.\n         */\n        this.Trello.get(\n            \"/members/me/boards?filter=open\",\n            function(b) {\n                console.log(\"Boards loaded\");\n                success(b);\n                this.boards = b;\n            }.bind(this),\n            function() {\n                console.log(\"Failed to load boards\");\n            }\n        );\n    };\n\n    getBoard = (boardID, success) => {\n        /**\n         * Gets Trello board object from board ID. Returns board object with success callback function.\n         */\n        if (boardID === \"-1\") {\n            return;\n        }\n        this.Trello.get(\n            \"/boards/\" + boardID,\n            function(b) {\n                success(b);\n            },\n            function() {\n                console.log(\"Failed to get board: \" + boardID);\n            }\n        );\n    };\n}\n\nexport default TrelloHandler;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Login from \"./components/Login/Login\";\nimport Main from \"./components/Main/Main.jsx\";\nimport TrelloHandler from \"./TrelloHandler.js\";\n\nclass App extends Component {\n    Trello = new TrelloHandler(window.Trello);\n    state = {\n        authorized: false\n    };\n\n    onLogin = () => {\n        /** Log In button pressed */\n        console.log(\"Login Request\");\n        this.Trello.authorize(this.verifyAuthorize);\n    };\n\n    verifyAuthorize = success => {\n        /** Callback function to verify if Trello authentication was successful.  */\n        if (success) {\n            this.setState({ authorized: true });\n        }\n    };\n\n    render() {\n        if (!this.state.authorized) {\n            return <Login onLogin={this.onLogin} />;\n        } else {\n            return <Main trelloHandler={this.Trello} />;\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}